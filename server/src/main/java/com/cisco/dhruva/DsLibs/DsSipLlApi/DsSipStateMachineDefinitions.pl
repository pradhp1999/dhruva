# this perl script keeps the tables in sync with the data

$warning     =  "// DO NOT EDIT THIS FILE. LL STATE TABLES ARE MAINTAINED IN THE PERL SCRIPT\n";
$ct_table_re =  "CT_TABLE";
$cti_table_re = "CTI_TABLE";
$st_table_re =  "ST_TABLE";
$sti_table_re = "STI_TABLE";
$ctix_table_re = "CTIX_TABLE";
$stix_table_re = "STIX_TABLE";

$row_re =       '\/\/\s*(\d)';

$0 =~ /(.*)\.pl$/;
$filename = "$1.java";

open (FILE, ">$filename") || die "$0: can't open $filename\n";

$states{"INI"} = "DS_INITIAL";
$states{"CAL"} = "DS_CALLING";
$states{"PRO"} = "DS_PROCEEDING";
$states{"COM"} = "DS_COMPLETED";
$states{"CON"} = "DS_CONFIRMED";
$states{"TER"} = "DS_TERMINATED";
$states{"RPR"} = "DS_RELPROCEEDING";
$states{"---"} = "DS_UNDEFINED";
$states{"XINI"} = "DS_XINITIAL";
$states{"XCOM"} = "DS_XCOMPLETED";
$states{"XCON"} = "DS_XCONFIRMED";
$states{"XTER"} = "DS_XTERMINATED";

@states = ("INI", "CAL", "PRO", "COM", "CON", "TER", "RPR", "XINI", "XCOM", "XCON", "XTER");
@states_full = ("DS_INITIAL", 
		"DS_CALLING", 
		"DS_PROCEEDING", 
		"DS_COMPLETED", 
		"DS_CONFIRMED",
		"DS_TERMINATED",
		"DS_PROCEEDING",
		"DS_XINITIAL",
		"DS_XCOMPLETED", 
		"DS_XCONFIRMED",
		"DS_XTERMINATED");

@CT_INPUTS = ("DS_CT_IN_START", 
	      "DS_CT_IN_T1", 
	      "DS_CT_IN_T1_EXPIRED", 
	      "DS_CT_IN_Tp", 
	      "DS_CT_IN_TIMEOUT",
          "DS_CT_IN_Tn",
	      "DS_CT_IN_CANCEL", 
	      "DS_CT_IN_CANCEL_TIMER", 
	      "DS_CT_IN_ACK", 
	      "DS_CT_IN_PROVISIONAL", 
	      "DS_CT_IN_2XX", 
	      "DS_CT_IN_3TO6XX", 
	      "DS_CT_IN_SERVICE_UNAVAILABLE", 
	      "DS_CT_IN_NEXT_SERVER", 
	      "DS_CT_IN_NO_SERVER", 
	      "DS_CT_IN_IO_EXCEPTION", 
	      "DS_CT_IN_OTHER_EXCEPTION");


@ST_INPUTS = ("DS_ST_IN_START", 
	      "DS_ST_IN_REQUEST", 
	      "DS_ST_IN_PROVISIONAL", 
	      "DS_ST_IN_TPROVISIONAL", 
	      "DS_ST_IN_2XX", 
	      "DS_ST_IN_3TO6XX",
	      "DS_ST_IN_CANCEL", 
	      "DS_ST_IN_TIMEOUT", 
	      "DS_ST_IN_T1", 
	      "DS_ST_IN_T1_EXPIRED", 
	      "DS_ST_IN_Tn", 
	      "DS_ST_IN_ACK", 
	      "DS_ST_IN_IO_EXCEPTION", 
	      "DS_ST_IN_OTHER_EXCEPTION",
	      "DS_ST_IN_NEXT_CLIENT", 
	      "DS_ST_IN_NO_CLIENT"); 


while (<DATA>)
  {
    $lines .= $_;
    if (/$ct_table_re/)
      {
	while (<DATA>)
	  {
	    $lines .= $_;
	    if (/$row_re/)
	      {
		$ct_rows{$1} = $_;
		if ($1 eq '5')
		  {
		    last;
		  }
	      }
	  }
      }
    if (/$cti_table_re/)
      {
	while (<DATA>)
	  {
	    $lines .= $_;
	    if (/$row_re/)
	      {
		$cti_rows{$1} = $_;
		if ($1 eq '5')
		  {
		    last;
		  }
	      }
	  }
      }
    if (/$sti_table_re/)
      {
	while (<DATA>)
	  {
	    $lines .= $_;
	    if (/$row_re/)
	      {
		$sti_rows{$1} = $_;
		if ($1 eq '5')
		  {
		    last;
		  }
	      }
	  }
      }
    if (/$st_table_re/)
      {
	while (<DATA>)
	  {
	    $lines .= $_;
	    if (/$row_re/)
	      {
		$st_rows{$1} = $_;
		if ($1 eq '5')
		  {
		    last;
		  }
	      }
	  }
      }

    if (/$ctix_table_re/)
      {
	while (<DATA>)
	  {
	    $lines .= $_;
	    if (/$row_re/)
	      {
		$ctix_rows{$1} = $_;
		if ($1 eq '2')
		  {
		    last;
		  }
	      }
	  }
      }
    if (/$stix_table_re/)
      {
	while (<DATA>)
	  {
	    $lines .= $_;
	    if (/$row_re/)
	      {
		$stix_rows{$1} = $_;
		if ($1 eq '3')
		  {
		    last;
		  }
	      }
	  }
      }
  }


for ($i = 0; $i <= 5; ++$i)
  {
    $str = "CT_$i";
    $subst = transition ($ct_rows{$i});
    $lines =~ s/$str/$subst/;

    $str = "CT_XREF_$i";
    $subst = xref ($i, \%ct_rows, \@CT_INPUTS);
    $lines =~ s/$str/$subst/;

    $str = "CTI_$i";
    $subst = transition ($cti_rows{$i});
    $lines =~ s/$str/$subst/;

    $str = "CTI_XREF_$i";
    $subst = xref ($i, \%cti_rows, \@CT_INPUTS);
    $lines =~ s/$str/$subst/;

    $str = "ST_$i";
    $subst = transition ($st_rows{$i});
    $lines =~ s/$str/$subst/;

    $str = "ST_XREF_$i";
    $subst = xref ($i, \%st_rows, \@ST_INPUTS);
    $lines =~ s/$str/$subst/;

    $str = "STI_$i";
    $subst = transition ($sti_rows{$i});
    $lines =~ s/$str/$subst/;

    $str = "STI_XREF_$i";
    $subst = xref ($i, \%sti_rows, \@ST_INPUTS);
    $lines =~ s/$str/$subst/;

    if ($1 <= 3)
    {
        $str = "CTIX_$i";
        $subst = transition ($ctix_rows{$i});
        $lines =~ s/$str/$subst/;

        $str = "CTIX_XREF_$i";
        $subst = xref ($i, \%ctix_rows, \@CT_INPUTS);
        $lines =~ s/$str/$subst/;

        $str = "STIX_$i";
        $subst = transition ($stix_rows{$i});
        $lines =~ s/$str/$subst/;

        $str = "STIX_XREF_$i";
        $subst = xref ($i, \%stix_rows, \@ST_INPUTS);
        $lines =~ s/$str/$subst/;
    }

  }

print FILE $warning;
print FILE $warning;
print FILE $lines;

close (FILE);


sub transition
  {
    my ($row) = @_;
    $ret_string = "";
    ($junk, $trans) =  split(/\|/, $row);
    $trans =~ s/^\s*//;
    $trans =~ s/\s*$//;
    @transitions =  split(/\s+/, $trans);
    for (local $i = 0; $i <= $#transitions; ++$i)
      {
	if ($i == $#transitions)
	  {
	    $ret_string .= "\t$states{$transitions[$i]}\n";
	  }
	else
	  {
	    $ret_string .= "\t$states{$transitions[$i]},\n";
	  }
      }
    $ret_string;
  }

sub xref
  {
    my ($state, $t, $inputs) = @_;
    $state_str = $states[$state];
    my($row_state) = 0;
    my($ret_string) = "";
    #print "state str == ---- $state, $state_str----\n\n";
    foreach $key (keys(%{$t}))
      {
	$row = ${$t}{$key};
        ($junk, $trans) =  split(/\|/, $row);
        $trans =~ s/^\s*//;
        $trans =~ s/\s*$//;
    
        @transitions =  split(/\s+/, $trans);
        for (my($k) = 0; $k <= $#transitions; ++$k)
          {
	    if ($transitions[$k] eq $state_str)
	      {
	        $ret_string .= "    //  $states_full[$row_state]  | ${$inputs}[$k]\n";
	      }
          }
        ++$row_state;
    
      }
      $ret_string;
    }



__DATA__

package com.dynamicsoft.DsLibs.DsSipLlApi;

/**
* Low level state machine constants.
*/
public interface DsSipStateMachineDefinitions
{

    // Client Transaction State Transition Tables 
    // ////////////////////////////////////////////////////////////////////////////////// (Invite)
    //                                       (Input)
    //                     0   1   2      3   4   5   6   7    8   9   10  11   12  13  14  15  16
    // -------------------------------------------------------------------------------------------
    // (CTI_TABLE)
    // ///////////////////////////////////////////////////////////////////////////////////////////
    //   State           | ST  T1  T1_EXP Tp  TO  Tn  CNL CNLT ACK PR  2XX 3TO6 SUR NXS NOS IOE OE  
    // -------------------------------------------------------------------------------------------
    // 0 INI  INITIAL    | CAL --- TER    --- --- TER --- ---  --- --- --- ---  --- --- --- --- ---
    // 1 CAL  CALLING    | --- CAL TER    --- --- TER CAL TER  --- PRO TER COM  CAL INI TER CAL ---
    // 2 PROC PROCEEDING | --- PRO TER    TER --- TER PRO TER  --- PRO TER COM  CAL --- --- --- ---
    // 3 COMP COMPLETED  | --- COM ---    --- TER TER COM COM  COM COM TER COM  COM --- --- TER ---
    // 4 CONF CONFIRMED  | --- --- ---    --- --- --- --- ---  --- --- --- ---  --- --- --- --- ---
    // 5 TERM TERMINATED | --- --- ---    --- --- --- TER ---  --- --- --- ---  --- --- --- --- ---
    // ////////////////////////////////////////////////////////////////////////////// (Non-te)
    //  (CT_TABLE)
    // ///////////////////////////////////////////////////////////////////////////////////////
    //   State           | ST  T1  T1_EXP Tp  TO  Tn  CNL CNLT --- PR  2XX 3TO6 SUR NXS NOS IOE OE  
    // -------------------------------------------------------------------------------------------
    // 0 INI  INITIAL    | CAL --- TER    --- --- TER --- ---  --- --- --- ---  --- --- --- --- ---
    // 1 CAL  CALLING    | --- CAL TER    --- --- TER CAL TER  --- PRO COM COM  CAL INI TER CAL ---
    // 2 PROC PROCEEDING | --- PRO TER    --- --- TER PRO TER  --- PRO COM COM  CAL --- --- --- ---
    // 3 COMP COMPLETED  | --- COM ---    --- TER TER --- COM  --- COM COM COM  COM --- --- --- ---
    // 4 CONF CONFIRMED  | --- --- ---    --- --- --- --- ---  --- --- --- ---  --- --- --- --- ---
    // 5 TERM TERMINATED | --- --- ---    --- --- --- TER ---  --- --- --- ---  --- --- --- --- ---
    // ///////////////////////////////////////////////////////////////////////////////////////////


    // Client transaction inputs 
    //////////////////////////////////////////////////////
    // ST     ==>  the first input
    // T1     ==>  request rtx timer
    // T1_EXP ==>  request rtx timer expired
    // Tp     ==>  timer to control the duration in PROC state
    // TO     ==>  timeout timer to control the duration in COM state
    // Tn     ==>  max transaction time expired
    // CNL    ==>  user code cancels transaction
    // CNLT   ==>  cancel timer expired
    // ACK    ==>  user code acks transaction 
    // PR     ==>  received provisional response 
    // 2XX    ==>  2XX final responses received
    // 3TO6XX ==>  3XX-6XX final resonses received
    // SUR    ==>  Service Unavailable (503) response
    // NXS    ==>  Next server
    // NOS    ==>  No next server
    // IOE    ==>  IO exception
    // OE     ==>  other exception
    //////////////////////////////////////////////////////
    // Timer mapping
    // -----------------------------------------------------------------------
    //                      | Timer name in SIP draft and default value
    // Timer event in code  | CTI                         CT
    // ---------------------|-------------------------------------------------
    // T1                   | TA(T1=0.5s or NA)           TE(T1=0.5s or NA)
    // T1_EXP               | TB(64*T1)                   TF(T3=16s)
    // Tp                   | TC(user supplied)                          
    // To                   | TD(T3 or 0s)                TK(T4 or 0s, T4=5s)
    // Tn                   | user supplied(not in draft) user supplied(not in draft)
    // -----------------------------------------------------------------------
    //* for To, 0s is for reliable transport and the other value is for unreliable ones

    // Client INVITE transaction xref
    //////////////////////////////////////////////////////////
    //   
    //  DS_INITIAL (INVITE)
    //
CTI_XREF_0
    // ///////////////////////////////////////////////////////
    //  DS_CALLING (INVITE)
    //
CTI_XREF_1
    //
    // ///////////////////////////////////////////////////////
    //  DS_PROCEEDING (INVITE)
    //
CTI_XREF_2
    //
    // ///////////////////////////////////////////////////////
    //  DS_COMPLETED (INVITE)
    //
CTI_XREF_3
    //
    // ///////////////////////////////////////////////////////
    //  DS_CONFIRMED (INVITE)
    //
CTI_XREF_4
    //
    // ///////////////////////////////////////////////////////
    //  DS_TERMINATED (INVITE)
    //
CTI_XREF_5
    //
    //


    // Client non INVITE transaction xref
    ////////////////////////////////////
    //   
    //  DS_INITIAL (non-INVITE)
    //
CT_XREF_0
    // ///////////////////////////////////////////////////////
    //  DS_CALLING (non-INVITE)
    //
CT_XREF_1
    //
    // ///////////////////////////////////////////////////////
    //  DS_PROCEEDING (non-INVITE)
    //
CT_XREF_2
    //
    // ///////////////////////////////////////////////////////
    //  DS_COMPLETED (non-INVITE)
    //
CT_XREF_3
    //
    // ///////////////////////////////////////////////////////
    //  DS_CONFIRMED (non-INVITE)
    //
CT_XREF_4
    //
    // ///////////////////////////////////////////////////////
    //  DS_TERMINATED (non-INVITE)
    //
CT_XREF_5
    //
    //









      

    // Server Transaction State Transition Tables  
    // ////////////////////////////////////////////////////////////////////////////// (Invite)
    //                                           (Input)
    //                     0    1  2   3   4   5    6   7   8    9     10  11  14  15  16  17
    // ---------------------------------------------------------------------------------------
    //  (STI_TABLE)                        
    // ///////////////////////////////////////////////////////////////////////////////////////
    //   State           | ST  REQ PRO TPR 2XX 3TO6 CNL TO  T1  T1_EXP Tn  ACK IOE OE  NXC NOC
    // ---------------------------------------------------------------------------------------
    // 0 INI  INITIAL    | CAL --- PRO PRO TER COM  CAL --- INI ---    TER --- --- --- --- ---
    // 1 CAL  CALLING    | --- CAL PRO PRO TER COM  CAL --- CAL TER    TER --- --- --- --- ---
    // 2 PROC PROCEEDING | --- PRO PRO PRO TER COM  PRO --- PRO TER    TER --- PRO --- PRO TER
    // 3 COMP COMPLETED  | --- COM --- --- --- COM  COM --- COM TER    TER CON COM --- COM TER
    // 4 CONF CONFIRMED  | --- CON --- --- --- ---  CON TER CON ---    TER CON CON --- --- ---
    // 5 TERM TERMINATED | --- --- --- --- --- ---  --- --- TER TER    --- --- --- --- --- ---
    // ////////////////////////////////////////////////////////////////////////// (Non-Invite)
    //  (ST_TABLE)                         
    // ///////////////////////////////////////////////////////////////////////////////////////
    //   State           | ST  REQ PRO TPR 2XX 3TO6 CNL TO  T1  T1_EXP Tn  --- IOE OE  NXC NOC
    // ---------------------------------------------------------------------------------------
    // 0 INI  INITIAL    | CAL --- PRO PRO COM COM  CAL --- --- ---    TER --- --- --- --- ---
    // 1 CAL  CALLING    | --- CAL PRO PRO COM COM  CAL --- --- ---    TER --- --- --- --- ---
    // 2 PROC PROCEEDING | --- PRO PRO PRO COM COM  PRO --- --- ---    TER --- PRO --- PRO TER
    // 3 COMP COMPLETED  | --- COM --- --- COM COM  COM TER --- ---    TER --- COM --- COM TER
    // 4 CONF CONFIRMED  | --- --- --- --- --- ---  --- --- --- ---    --- --- --- --- --- ---
    // 5 TERM TERMINATED | --- --- --- --- --- ---  --- --- --- ---    --- --- --- --- --- ---
    // ///////////////////////////////////////////////////////////////////////////////////////

    // Server transaction inputs 
    ////////////////////////////////////
    // ST     ==> the first input
    // REQ    ==> request was received
    // PRO    ==> user code sends provisional
    // TPR    ==> delayed provisional timer
    // FIN    ==> user code sends final
    // CNL    ==> received cancel
    // TO     ==> timeout timer to control duration in CONF(STI) or COMP(ST)state 
    // T1     ==> response rtx timer
    // T1_EXP ==> response rtx timer expired
    // Tn     ==> max transaction time expired
    // ACK    ==> ACK was received
    // IOE    ==> IO exception
    // OE     ==> other exception
    //////////////////////////////////////////////////////
    // Timer mapping
    // ---------------------------------------------------------------------
    //                     | Timer name in SIP draft and default value
    //                     |------------------------------------------------
    // Timer event in code |  STI                         ST
    // --------------------|------------------------------------------------
    // T1                  | TG(T1=0.5s or MAX_INT)                 
    // T1_EXP              | TH(64*T1)                                           
    // To                  | TI(T4=5s or 0s)             TJ(T3=16s or 0s)
    // Tn                  | user supplied(not in draft) user supplied(not in draft)
    // ---------------------------------------------------------------------
    //* If there are two values, 0s is for reliable transport and the other value is for unreliable ones


    // Server INVITE transaction xref
    ////////////////////////////////////
    //   
    //  DS_INITIAL (INVITE)
    //
STI_XREF_0
    // ///////////////////////////////////////////////////////
    //  DS_CALLING (INVITE)
    //
STI_XREF_1
    //
    // ///////////////////////////////////////////////////////
    //  DS_PROCEEDING (INVITE)
    //
STI_XREF_2
    //
    // ///////////////////////////////////////////////////////
    //  DS_COMPLETED (INVITE)
    //
STI_XREF_3
    //
    // ///////////////////////////////////////////////////////
    //  DS_CONFIRMED (INVITE)
    //
STI_XREF_4
    //
    // ///////////////////////////////////////////////////////
    //  DS_TERMINATED (INVITE)
    //
STI_XREF_5
    //
    //


    // Server non INVITE transaction xref
    ////////////////////////////////////
    //   
    //  DS_INITIAL (non-INVITE)
    //
ST_XREF_0
    // ///////////////////////////////////////////////////////
    //  DS_CALLING (non-INVITE)
    //
ST_XREF_1
    //
    // ///////////////////////////////////////////////////////
    //  DS_PROCEEDING (non-INVITE)
    //
ST_XREF_2
    //
    // ///////////////////////////////////////////////////////
    //  DS_COMPLETED (non-INVITE)
    //
ST_XREF_3
    //
    // ///////////////////////////////////////////////////////
    //  DS_CONFIRMED (non-INVITE)
    //
ST_XREF_4
    //
    // ///////////////////////////////////////////////////////
    //  DS_TERMINATED (non-INVITE)
    //
ST_XREF_5
    //
    //


    // INVITE Client Transaction Extra State Transition Tables 
    // ////////////////////////////////////////////////////////////////////////////// (Invi/////te)
    //                                       (Input)                                            
    //                       0    1    2      3    4    5    6    7    8    9    10   11    12  13  14   15   16
    // ------------------------------------------------------------------------------------------------------------
    // (CTIX_TABLE)                                                                             
    // ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //   State             | ST   T1   T1_EXP Tp   TO   Tn   CNL  CNLT ACK  PR   2XX  3TO6  SUR NXS NOS  IOE  OE  
    // ------------------------------------------------------------------------------------------------------------
    // 0 XINI  XINITIAL    | XCOM ---  ---    ---  ---  ---  ---  ---  ---  ---  ---  ---   --- --- ---  ---  ---
    // 1 XCOM  XCOMPLETE   | ---  XCOM ---    XCOM XTER XTER XCOM XCOM XCOM XCOM XCOM ---   --- --- ---  XTER ---
    // 2 XCON  XCONFIRMED  | ---  ---  ---    ---  ---  ---  ---  ---  ---  ---  ---  ---   --- --- ---  ---  ---
    // 3 XTER  XTERMINATED | ---  ---  ---    ---  ---  ---  ---  ---  ---  ---  ---  ---   --- --- ---  ---  ---
    // //////////////////////////////////////////////////////////////////////////////      
                                                                                           
    // Client INVITE extra transaction for 2xx xref                                        
    //////////////////////////////////////////////////////////
    //   
    //  DS_XINITIAL (INVITE)
    //
CTIX_XREF_0
    //
    // ///////////////////////////////////////////////////////
    //  DS_XCOMPLETED (INVITE)
    //
CTIX_XREF_1
    //
    // ///////////////////////////////////////////////////////
    //  DS_XCONFIRMED (INVITE)
    //
CTIX_XREF_2
    //
    // ///////////////////////////////////////////////////////
    //  DS_XTERMINATED (INVITE)
    //
CTIX_XREF_3
    //
    //

    // INVITE Server Transaction Extra State Transition Tables 
    // ////////////////////////////////////////////////////////////////////////////////// (Invite)
    //                                           (Input)
    //                      0    1     2   3   4   5    6    7    8     10    11   12   13   14  15   16
    // ---------------------------------------------------------------------------------------------------
    //  (STIX_TABLE)                           
    // ///////////////////////////////////////////////////////////////////////////////////////////////////
    //   State             | ST   REQ  PRO TPR 2XX 3TO6 CNL  TO   T1   T1_EXP Tn   ACK  IOE  OE  NXC  NOC
    // ----------------------------------------------------------------------------------------------------
    // 0 XINI  XINITIAL    | XCOM ---  --- --- --- ---  ---  ---  ---  ---    ---  ---  ---  --- ---  ---
    // 1 XCOM  XCOMPLETED  | ---  XCOM --- --- --- ---  XCOM ---  XCOM XTER   XTER XCON XTER --- XCOM XTER
    // 2 XCON  XCONFIRMED  | ---  XCON --- --- --- ---  XCON XTER XCON ---    XTER XCON XCON --- ---  ---
    // 3 XTER  XTERMINATED | ---  ---  --- --- --- ---  ---  ---  ---  ---    ---  ---  ---  --- ---  ---
    // ////////////////////////////////////////////////////////////////////////////////////////////////////

    // Server INVITE extra transaction for 2xx xref
    //////////////////////////////////////////////////////////
    //   
    //  DS_XINITIAL (INVITE)
    //
STIX_XREF_0
    //
    // ///////////////////////////////////////////////////////
    //  DS_XCOMPLETED (INVITE)
    //
STIX_XREF_1
    //
    // ///////////////////////////////////////////////////////
    //  DS_XCONFIRMED (INVITE)
    //
STIX_XREF_2
    //
    // ///////////////////////////////////////////////////////
    //  DS_XTERMINATED (INVITE)
    //
STIX_XREF_3
    //
    //


    // Input type definitions
    /** input mask value. */
    public final static int DS_INPUT_MASK = 0x00ff;

    // Client transaction inputs 
    /** client transaction input: the first input. */
    public final static int DS_CT_IN_START = 0x0000; 
    /** client transaction input: request rtx timer. */
    public final static int DS_CT_IN_T1 =  0x0001;
    /** client transaction input: request rtx timer expired. */
    public final static int DS_CT_IN_T1_EXPIRED =  0x0002;
    /** client transaction input: time to control duration in PROC expired. */
    public final static int DS_CT_IN_Tp = 0x0003;
    /** client transaction input: COM->TERM timer(formerly 32 second timer) expired. */
    public final static int DS_CT_IN_TIMEOUT = 0x0004;
    /** client transaction input: max transaction duration timer. */
    public final static int DS_CT_IN_Tn = 0x0005;
    /** client transaction input: user code cancels transaction. */
    public final static int DS_CT_IN_CANCEL = 0x0006;
    /** client transaction input: cancel timer expired. */
    public final static int DS_CT_IN_CANCEL_TIMER = 0x0007;
    /** client transaction input: user code acks transaction . */
    public final static int DS_CT_IN_ACK = 0x0008;
    /** client transaction input: received provisional response . */
    public final static int DS_CT_IN_PROVISIONAL = 0x0009;
    /** client transaction input: received 2XX final respnse. */
    public final static int DS_CT_IN_2XX = 0x000a;
    /** client transaction input: received 3XX-6XX final respnse. */
    public final static int DS_CT_IN_3TO6XX = 0x000b;
    /** client transaction input: service unavailable response. */
    public final static int DS_CT_IN_SERVICE_UNAVAILABLE = 0x000c;
    /** client transaction input: next server found. */
    public final static int DS_CT_IN_NEXT_SERVER = 0x000d;
    /** client transaction input: next server not found. */
    public final static int DS_CT_IN_NO_SERVER = 0x000e;
    /** client transaction input: IO exception. */
    public final static int DS_CT_IN_IO_EXCEPTION = 0x000f;
    /** client transaction input: other exception. */
    public final static int DS_CT_IN_OTHER_EXCEPTION = 0x0010;


    // Server transaction inputs 
    /** server transaction input: the first input. */
    public final static int DS_ST_IN_START = 0x0000;
    /** server transaction input: request was received. */
    public final static int DS_ST_IN_REQUEST = 0x0001;
    /** server transaction input: user code sends provisional. */
    public final static int DS_ST_IN_PROVISIONAL = 0x0002;
    /** server transaction input: delayed provisional timer fires . */
    public final static int DS_ST_IN_TPROVISIONAL = 0x0003;
    /** server transaction input: user code sends 2XX final. */
    public final static int DS_ST_IN_2XX = 0x0004;
    /** server transaction input: user code sends 3XX-6XX final. */
    public final static int DS_ST_IN_3TO6XX = 0x0005;
    /** server transaction input: received cancel. */
    public final static int DS_ST_IN_CANCEL = 0x0006;
    /** server transaction input: timer for COM->TERM(ST) or CONF->TERM(STI) expired. */
    public final static int DS_ST_IN_TIMEOUT = 0x0007;
    /** server transaction input: response rtx timer. */
    public final static int DS_ST_IN_T1 = 0x0008;
    /** server transaction input: response rtx timer expired. */
    public final static int DS_ST_IN_T1_EXPIRED = 0x0009;
    /** server transaction input: max transaction time expired. */
    public final static int DS_ST_IN_Tn = 0x000a;
    /** server transaction input: ACK was received. */
    public final static int DS_ST_IN_ACK = 0x000b;
    /** server transaction input: IO exception. */
    public final static int DS_ST_IN_IO_EXCEPTION = 0x000c;
    /** server transaction input: other exception. */
    public final static int DS_ST_IN_OTHER_EXCEPTION = 0x000d;
    /** server transaction input: next client found. */
    public final static int DS_ST_IN_NEXT_CLIENT = 0x000e;
    /** server transaction input: next client not found. */
    public final static int DS_ST_IN_NO_CLIENT = 0x000f;

    // state definitions
    /** state mask value. */
    public final static int DS_MASK = 0xff00;
    /** initial state. */
    public final static int DS_INITIAL = 0x0100; 
    /** calling state. */
    public final static int DS_CALLING = 0x0200; 
    /** proceeding state. */
    public final static int DS_PROCEEDING = 0x0300; 
    /** completed state. */
    public final static int DS_COMPLETED = 0x0400; 
    /** completed state. */
    public final static int DS_CONFIRMED = 0x0500;
    /** terminated state. */
    public final static int DS_TERMINATED = 0x0600; 
    /** extra initial state for 2xx invite trans. */
    public final static int DS_XINITIAL = 0x0700; 
    /** extra completed state for 2xx invite trans. */
    public final static int DS_XCOMPLETED = 0x0800; 
    /** extra completed state for 2xx invite server trans. */
    public final static int DS_XCONFIRMED = 0x0900;
    /** extra terminated state for 2xx invite trans. */
    public final static int DS_XTERMINATED = 0x0A00; 
    /** undefined state. */
    public final static int DS_UNDEFINED = 0x0B00; 

    /** initial id. */
    public final static int DS_INITIAL_IDX = 0; 
    /** calling id. */
    public final static int DS_CALLING_IDX = 1; 
    /** proceeding id. */
    public final static int DS_PROCEEDING_IDX = 2; 
    /** completed id. */
    public final static int DS_COMPLETED_IDX = 3;
    /** confirmed id. */
    public final static int DS_CONFIRMED_IDX = 4;

    /** xinitial id. */
    public final static int DS_XINITIAL_IDX = 0;
    /** xcompleted id. */
    public final static int DS_XCOMPLETED_IDX = 1;
    /** xconfirmed id. */
    public final static int DS_XCONFIRMED_IDX = 2;


    //////////////////////////////////////////////////////////////////
    /// Client Transaction INITIAL state transitions  (CT_INITIAL)
    //////////////////////////////////////////////////////////////////

    /** client INVITE transaction transitions from INITIAL state. */
    public final static    int [] CTI_INITIAL_TRANSITIONS = {
        CTI_0
    };
    /** client non-INVITE transaction transitions from INITIAL state. */
    public final static  int [] CT_INITIAL_TRANSITIONS = {
        CT_0
    };

        

    //////////////////////////////////////////////////////////////////
    /// Client Transaction CALLING state transitions (CT_CALLING)
    //////////////////////////////////////////////////////////////////
    /** client INVITE transaction transitions from CALLING state. */
    public final static    int [] CTI_CALLING_TRANSITIONS = {
        CTI_1
    };

    /** client non-INVITE transaction transitions from CALLING state. */
    public final static    int [] CT_CALLING_TRANSITIONS = {
        CT_1
    };


    //////////////////////////////////////////////////////////////////
    /// Client Transaction PROCEEDING state transitions (CT_PROCEEDING)
    //////////////////////////////////////////////////////////////////
    /** client INVITE transaction transitions from PROCEEDING state. */
    public final static    int [] CTI_PROCEEDING_TRANSITIONS = {
        CTI_2
    };

    /** client non-INVITE transaction transitions from PROCEEDING state. */
    public final static    int [] CT_PROCEEDING_TRANSITIONS = {
        CT_2
    };


    //////////////////////////////////////////////////////////////////
    /// Client Transaction COMPLETED state transitions (CT_COMPLETED)
    //////////////////////////////////////////////////////////////////
    /** client INVITE transaction transitions from COMPLETED state. */
    public final static    int [] CTI_COMPLETED_TRANSITIONS = {
        CTI_3
    };
    /** client non-INVITE transaction transitions from COMPLETED state. */
    public final static    int [] CT_COMPLETED_TRANSITIONS = {
        CT_3
    };


    //////////////////////////////////////////////////////////////////
    /// Client Transaction extra INITIAL state transitions (CTIX_XINITIAL)
    //////////////////////////////////////////////////////////////////
    /** client INVITE transaction transitions from COMPLETED state. */
    public final static    int [] CTIX_XINITIAL_TRANSITIONS = {
        CTIX_0
    };

    //////////////////////////////////////////////////////////////////
    /// Client Transaction extra COMPLETED state transitions (CTIX_XCOMPLETED)
    //////////////////////////////////////////////////////////////////
    /** client INVITE transaction transitions from COMPLETED state. */
    public final static    int [] CTIX_XCOMPLETED_TRANSITIONS = {
        CTIX_1
    };
    


    /** client INVITE transaction transitions . */
    public final static int[][] CTI_TRANSITIONS = {
        CTI_INITIAL_TRANSITIONS,
        CTI_CALLING_TRANSITIONS,
        CTI_PROCEEDING_TRANSITIONS,
        CTI_RELPROCEEDING_TRANSITIONS,
        CTI_COMPLETED_TRANSITIONS
    };

    /** client non-INVITE transaction transitions . */
    public final static int[][] CT_TRANSITIONS = {
        CT_INITIAL_TRANSITIONS,
        CT_CALLING_TRANSITIONS,
        CT_PROCEEDING_TRANSITIONS,
        CT_COMPLETED_TRANSITIONS
    };

    /** client INVITE transaction 2XX extra transitions . */
    public final static int[][] CTIX_TRANSITIONS = {
        CTIX_XINITIAL_TRANSITIONS,
        CTIX_XCOMPLETED_TRANSITIONS
    };

    //////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////
    /////////    Server State Machine Transitions
    //////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////


    //////////////////////////////////////////////////////////////////
    /// Server Transaction INITIAL state transitions (ST_INITIAL)
    //////////////////////////////////////////////////////////////////
    /** server INVITE transaction transitions from INITIAL state. */
    public final static int [] STI_INITIAL_TRANSITIONS = {
        STI_0
    };
    /** client non-INVITE transaction transitions from INITIAL state. */
    public final static int [] ST_INITIAL_TRANSITIONS = {
        ST_0
    };


    //////////////////////////////////////////////////////////////////
    /// Server Transaction CALLING state transitions (ST_CALLING)
    //////////////////////////////////////////////////////////////////
    /** server INVITE transaction transitions from CALLING state. */
    public final static int [] STI_CALLING_TRANSITIONS = {
        STI_1
    };
    /** server non-INVITE transaction transitions from CALLING state. */
    public final static int [] ST_CALLING_TRANSITIONS = {
        ST_1
    };


    //////////////////////////////////////////////////////////////////
    /// Server Transaction PROCEEDING state transitions (ST_PROCEEDING)
    //////////////////////////////////////////////////////////////////

    /** server INVITE transaction transitions from PROCEEDING state. */
    public final static int [] STI_PROCEEDING_TRANSITIONS = {
        STI_2
    };
    /** server non-INVITE transaction transitions from PROCEEDING state. */
    public final static int [] ST_PROCEEDING_TRANSITIONS = {
        ST_2
    };



    //////////////////////////////////////////////////////////////////
    /// Server Transaction COMPLETED state transitions (ST_COMPLETED)
    //////////////////////////////////////////////////////////////////
    /** server INVITE transaction transitions from COMPLETED state. */
    public final static int [] STI_COMPLETED_TRANSITIONS = {
        STI_3
    };

    /** server non-INVITE transaction transitions from COMPLETED state. */
    public final static int [] ST_COMPLETED_TRANSITIONS = {
        ST_3
    };



    //////////////////////////////////////////////////////////////////
    /// Server Transaction CONFIRMED state transitions (STI_CONFIRMED)
    //////////////////////////////////////////////////////////////////
    /** server INVITE transaction transitions from CONFIRMED state. */
    public final static int [] STI_CONFIRMED_TRANSITIONS = {
        STI_4
    };


    //////////////////////////////////////////////////////////////////
    /// Server Transaction extra INITIAL state transitions (STIX_XINITIAL)
    //////////////////////////////////////////////////////////////////
    /** server INVITE transaction transitions from XINITIAL state. */
    public final static int [] STIX_XINITIAL_TRANSITIONS = {
        STIX_0
    };

    //////////////////////////////////////////////////////////////////
    /// Server Transaction extra COMPLETED state transitions (STIX_XCOMPLETED)
    //////////////////////////////////////////////////////////////////
    /** server INVITE transaction transitions from XCOMPLETED state. */
    public final static int [] STIX_XCOMPLETED_TRANSITIONS = {
        STIX_1
    };

    //////////////////////////////////////////////////////////////////
    /// Server Transaction extra CONFIRMED state transitions (STIX_XCONFIRMED)
    //////////////////////////////////////////////////////////////////
    /** server INVITE transaction transitions from XCONFIRMED state. */
    public final static int [] STIX_XCONFIRMED_TRANSITIONS = {
        STIX_2
    };

    /** server INVITE transaction transitions . */
    public final static int[][] STI_TRANSITIONS = {
        STI_INITIAL_TRANSITIONS,
        STI_CALLING_TRANSITIONS,
        STI_PROCEEDING_TRANSITIONS,
        STI_COMPLETED_TRANSITIONS,
        STI_CONFIRMED_TRANSITIONS,
        STI_WAIT_PRACK_TRANSITIONS,
        STI_RELPROCEEDING_TRANSITIONS
    };

    /** server non-INVITE transaction transitions . */
    public final static int[][] ST_TRANSITIONS = {
        ST_INITIAL_TRANSITIONS,
        ST_CALLING_TRANSITIONS,
        ST_PROCEEDING_TRANSITIONS,
        ST_COMPLETED_TRANSITIONS
    };

    /** server INVITE extra transaction transitions for 2XX . */
    public final static int[][] STIX_TRANSITIONS = {
        STIX_XINITIAL_TRANSITIONS,
        STIX_XCOMPLETED_TRANSITIONS,
        STIX_XCONFIRMED_TRANSITIONS
    };
}       // End class DsSipStateMachineDefinitionsNG

