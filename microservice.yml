################################################################################
# hello-world microservice file
# -----------------------------
# This file contains metadata about the hello-world service.
# It's important that the data be populated correctly, and as fully as possible
# because it is used for the generation of the Service Owners Matrix
################################################################################

# id - A uniquely identifiying name for the component.
id: hello-world
# name - The name of the component in English.
name: Hello World
# description - A short description of the component.
description: A complete minimal microservice.
# version - The deployed version, populated automatically.
version: ${project.version}
# deploy-file - The file used to deploy the component.
deploy-file: ../server/target/hello-world-server.war
# ping-path - The relative path of the ping URL for the component.
ping-path: ping
# timezone - The primary timezone for the component team. It should work as a query
#            to https://time.is/<timezone>
timezone: PST
# location - The primary location for the component team. It should work as a query
#            to https://time.is/<location> and https://maps.google.com/?q=<location>
location: Seattle, WA
# issues - The URL for the component's issue tracker.
issues: https://sqbu-github.cisco.com/WebExSquared/hello-world/issues
# wiki - The URL for the component's wiki.
wiki: https://sqbu-github.cisco.com/WebExSquared/hello-world/wiki
# runbook - The URL for the component's runbook.
runbook: https://sqbu-github.cisco.com/WebExSquared/hello-world/wiki/Runbook

# owner - information about the component owner(s)
owner:
  # email - the contact email address(es) of the owner.
  #         The format can be any of dict, list, or comma separated string
  #         It's recommended to use a dict mapping email to display name.
  email: { prentice : "Steve Prentice" }
  # pagerduty - the pagerduty.com URL for the component
  pagerduty: https://ciscospark.pagerduty.com/services/PZGV51T
  # pagerdutyemail - the pagerduty email alias for the component
  #                  The same formats as the email field can be used, but
  #                  as there may be no sensible display name, the recommendation 
  #                  to use a dict does not apply
  # pagerdutyemail: hello-world-pagerduty@some-domain.tld

  # spark - The spark room ID for automaic notifications. This will typically be
  #         the "Component Pipeline" room 
  spark: fb2af2a0-fad6-11e6-a837-fd921eb23d09
  # askspark - The spark room ID for asking questions about the component. This will 
  #            typically be the "Ask Component" room
  askspark: 9ddb7ab0-6af4-11e6-8ceb-b9db98a3b15e

tests:
  default:
    name: HelloWorld Integration Tests
    files:
    - ../integration/target/hello-world-integration-tests.jar
    test-task:
      command: java -jar hello-world-integration-tests.jar
      service-environment: 'true'
    artifacts:
      "**/TEST-*.xml":
        type: junit
  hello-world-integration:
    name: Integration tests that consume hello-world
    files:
    - ../integration/target/hello-world-integration-tests.jar
    tags:
      [xtest.hello-world]
    test-task:
      command: java -jar hello-world-integration-tests.jar
    artifacts:
      "**/TEST-*.xml":
        type: junit

publish:
  git:
    url: ${env.GIT_URL}
    branch: ${env.GIT_BRANCH}
    commit: ${env.GIT_COMMIT}
  maven:
    modules:
    - client
